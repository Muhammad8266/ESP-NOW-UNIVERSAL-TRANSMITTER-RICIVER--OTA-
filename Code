#include <ESP8266WiFi.h>
#include <espnow.h>
#include <ArduinoOTA.h>

// Replace this with the receiver's MAC address after obtaining it
String receiverMacAddressStr = "Add receiver MAC address here"; // Example: Replace with actual MAC

uint8_t receiverMacAddress[6]; // Hexadecimal MAC address storage
bool isTransmitter = false;    // Flag to determine role
unsigned long lastReceivedTime = 0; // Track last data received time
unsigned long apModeStartTime = 0;  // Track AP mode start time

// GPIO pins D1 to D8
const int pins[] = {5, 4, 0, 2, 14, 12, 13, 15};
uint8_t pinStatus[8]; // Pin state storage

// Function prototypes
void onDataReceive(uint8_t *mac, uint8_t *incomingData, uint8_t len);
void onDataSent(uint8_t *mac, uint8_t sendStatus);
bool convertMacAddress(String macStr, uint8_t *macArray);

// Function to convert MAC address from string to hexadecimal
bool convertMacAddress(String macStr, uint8_t *macArray) {
  if (macStr.length() != 17) return false; // Invalid format
  int idx = 0;
  for (int i = 0; i < 6; i++) {
    macArray[i] = strtol(macStr.substring(idx, idx + 2).c_str(), NULL, 16);
    idx += 3;
  }
  return true;
}

// Setup function
void setup() {
  Serial.begin(115200);

  // Print this device's MAC address
  String thisMac = WiFi.macAddress();
  Serial.print("This Device MAC Address: ");
  Serial.println(thisMac);

  // Determine role based on receiver MAC address
  if (receiverMacAddressStr != "Add receiver MAC address here") {
    if (convertMacAddress(receiverMacAddressStr, receiverMacAddress)) {
      isTransmitter = true;
      Serial.println("This board is Transmitter.");
      WiFi.softAP("Transmitter-AP"); // Set AP mode name for transmitter
    } else {
      Serial.println("Invalid Receiver MAC Address format.");
      return;
    }
  } else {
    Serial.println("This board is Receiver.");
    WiFi.softAP("Receiver-AP"); // Set AP mode name for receiver
  }

  // Initialize ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("ESP-NOW initialization failed.");
    return;
  }

  esp_now_set_self_role(ESP_NOW_ROLE_COMBO);
  esp_now_register_recv_cb(onDataReceive);
  esp_now_register_send_cb(onDataSent);

  // Add receiver as peer if this is the transmitter
  if (isTransmitter) {
    esp_now_add_peer(receiverMacAddress, ESP_NOW_ROLE_COMBO, 1, NULL, 0);
  }

  // Initialize GPIO pins
  for (int i = 0; i < 8; i++) {
    pinMode(pins[i], isTransmitter ? INPUT_PULLUP : OUTPUT);
    if (!isTransmitter) {
      digitalWrite(pins[i], LOW); // Turn off LEDs initially
    }
    pinStatus[i] = LOW;
  }

  // Enable OTA
  ArduinoOTA.begin();
  Serial.println("OTA mode enabled. Ready to receive updates.");

  apModeStartTime = millis(); // Start AP mode timer
}

// Loop function
void loop() {
  ArduinoOTA.handle(); // Handle OTA updates

  // Disable AP mode after 5 minutes
  if (millis() - apModeStartTime > 300000) {
    WiFi.softAPdisconnect(true);
    Serial.println("AP Mode turned off after 5 minutes.");
  }

  if (isTransmitter) {
    uint8_t currentPinState[8];
    bool isAnyPinGrounded = false;

    // Check pin states
    for (int i = 0; i < 8; i++) {
      currentPinState[i] = digitalRead(pins[i]);
      if (currentPinState[i] == LOW) {
        isAnyPinGrounded = true; // At least one pin is grounded
      }
      pinStatus[i] = currentPinState[i];
    }

    // Continuously send data as long as any pin is grounded
    if (isAnyPinGrounded) {
      esp_now_send(receiverMacAddress, pinStatus, sizeof(pinStatus));
      Serial.println("Data sent to receiver.");
      delay(100); // Prevent flooding
    }
  } else {
    // Turn off LEDs if no data received for 1 second
    if (millis() - lastReceivedTime > 1000) {
      for (int i = 0; i < 8; i++) {
        digitalWrite(pins[i], LOW);
      }
    }
  }
}

// Callback for received data
void onDataReceive(uint8_t *mac, uint8_t *incomingData, uint8_t len) {
  if (!isTransmitter) {
    for (int i = 0; i < 8; i++) {
      pinStatus[i] = incomingData[i];
      digitalWrite(pins[i], pinStatus[i] == LOW ? HIGH : LOW); // Invert for LEDs
    }
    Serial.println("Data received and LEDs updated.");
    lastReceivedTime = millis();
  }
}

// Callback for send status
void onDataSent(uint8_t *mac, uint8_t sendStatus) {
  Serial.print("Data sent to ");
  for (int i = 0; i < 6; i++) {
    Serial.print(mac[i], HEX);
    if (i < 5) Serial.print(":");
  }
  Serial.print(" - Status: ");
  Serial.println(sendStatus == 0 ? "Success" : "Failure");
}
